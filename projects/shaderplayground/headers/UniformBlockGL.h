#ifndef UNIFORMBLOCKGL_H
#define UNIFORMBLOCKGL_H

#include "GL/glew.h"

#include <string>
#include <unordered_map>


class UniformBlockGL{
private:
    GLuint          m_ID;
    std::string     m_Name;
    GLint           m_Size              =   0;
    GLuint          m_BindIndex         =   0;

    bool            m_hasInitialized    =   false;
    //turns true after querying a shader

    std::unordered_map<std::string, GLint>m_UniformOffsets;


public:    void Init(GLuint shader);
            //TODO: make it automatic (via an autogenerated shader)
public:
    UniformBlockGL(const std::string &name, const GLuint &binding, const GLuint &uniformCnt, const char** uniformNames);


    GLuint          GetID()             const;
    std::string     GetName()           const;
    GLuint          GetBindIndex()      const;
    bool            HasInitialized()    const;


    void SetShaderBinding(GLuint shader);

    template<typename T>
    void SetUniformValue(const std::string &uniformName, const T &value){
        glBindBuffer(GL_UNIFORM_BUFFER, m_ID);
        glBufferSubData(GL_UNIFORM_BUFFER, m_UniformOffsets[uniformName], sizeof(T), &value);
        glBindBuffer(GL_UNIFORM_BUFFER, 0);
    }

    ~UniformBlockGL();
    //TODO: destructor

};

#endif